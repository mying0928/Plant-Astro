---
import '../styles/global.css';
const { title } = Astro.props;
---
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Noto+Sans+TC:wght@400;500;700&display=swap" rel="stylesheet">
    <script is:inline src="https://unpkg.com/lucide@latest"></script>
    <style is:global>
        @font-face {
            font-family: 'ChenYuluoyan';
            src: url('/Plant-Astro/fonts/ChenYuluoyan-2.0-Thin.ttf') format('truetype');
        }
    </style>
</head>
<body class="text-gray-200">
    <canvas id="particle-canvas"></canvas>
    <div id="youtube-player-container"></div>
    <slot />
    <footer class="text-center mt-16 pb-8">
        <p class="text-gray-500 dark:text-gray-400">&copy; <span id="year"></span> 我的植物養護紀錄. All Rights Reserved.</p>
    </footer>
    <script is:inline>
        // 所有客戶端互動腳本
        function initializeSearch() {
            const searchInput = document.getElementById('searchInput');
            const plantGrid = document.getElementById('plantGrid');
            const noResultsMessage = document.getElementById('noResultsMessage');
            const searchTermDisplay = document.getElementById('searchTermDisplay');
            if (!searchInput || !plantGrid || !noResultsMessage) return;
            searchInput.addEventListener('input', (event) => {
                const searchTerm = event.target.value.toLowerCase().trim();
                let visibleCount = 0;
                const allCards = plantGrid.querySelectorAll('.plant-card');
                allCards.forEach(card => {
                    const plantName = card.dataset.plantName;
                    const isVisible = searchTerm === "" || plantName.includes(searchTerm);
                    card.classList.toggle('hidden', !isVisible);
                    if (isVisible) visibleCount++;
                });
                noResultsMessage.classList.toggle('hidden', !(visibleCount === 0 && searchTerm.length > 0));
                if (visibleCount === 0) {
                    searchTermDisplay.textContent = event.target.value;
                }
            });
        }
        function initializeParticleEffect() {
            const canvas = document.getElementById('particle-canvas');
            if (!canvas) return;
            const ctx = canvas.getContext('2d');
            let particles = [];
            let mouse = { x: null, y: null };
            const options = { particleCount: window.innerWidth < 768 ? 80 : 150, connectDistance: 100, mouseDistance: 150 };
            class Particle { constructor() { this.x = Math.random() * canvas.width; this.y = Math.random() * canvas.height; this.size = Math.random() * 2 + 0.5; this.color = `rgba(255, 255, 255, ${Math.random() * 0.3 + 0.7})`; } draw() { ctx.fillStyle = this.color; ctx.beginPath(); ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); ctx.fill(); } }
            function setup() { canvas.width = window.innerWidth; canvas.height = window.innerHeight; particles = []; for (let i = 0; i < options.particleCount; i++) { particles.push(new Particle()); } }
            function draw() { ctx.clearRect(0, 0, canvas.width, canvas.height); for (const p of particles) { p.draw(); } if (mouse.x) { for (let i = 0; i < particles.length; i++) { const p1 = particles[i]; const distToMouse = Math.hypot(p1.x - mouse.x, p1.y - mouse.y); if (distToMouse < options.mouseDistance) { for (let j = i + 1; j < particles.length; j++) { const p2 = particles[j]; const distBetweenParticles = Math.hypot(p1.x - p2.x, p1.y - p2.y); if (distBetweenParticles < options.connectDistance) { ctx.beginPath(); ctx.strokeStyle = `rgba(224, 242, 254, ${1 - distBetweenParticles / options.connectDistance})`; ctx.lineWidth = 0.4; ctx.moveTo(p1.x, p1.y); ctx.lineTo(p2.x, p2.y); ctx.stroke(); } } } } } }
            let animationFrameId;
            function animate() { draw(); animationFrameId = requestAnimationFrame(animate); }
            function handleMouseMove(event) { mouse.x = event.x; mouse.y = event.y; }
            function handleMouseOut() { mouse.x = null; mouse.y = null; }
            window.addEventListener('resize', () => { cancelAnimationFrame(animationFrameId); setup(); animate(); });
            window.addEventListener('mousemove', handleMouseMove);
            window.addEventListener('mouseout', handleMouseOut);
            setup(); animate();
        }
        function initializeMusicPlayer() {
            const YOUTUBE_VIDEO_ID = 'TgOu00Mf3kI';
            const tag = document.createElement('script');
            tag.src = "https://www.youtube.com/iframe_api";
            const firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
            let player;
            let isMuted = true;
            window.onYouTubeIframeAPIReady = function() {
                player = new YT.Player('youtube-player-container', {
                    height: '315', width: '560', videoId: YOUTUBE_VIDEO_ID,
                    playerVars: { 'autoplay': 1, 'controls': 0, 'loop': 1, 'playlist': YOUTUBE_VIDEO_ID, 'mute': 1 },
                    events: { 'onReady': (event) => event.target.playVideo() }
                });
            }
            const toggleMusicBtn = document.getElementById('toggle-music-btn');
            if (toggleMusicBtn) {
                toggleMusicBtn.addEventListener('click', () => {
                    if (player && typeof player.unMute === 'function') {
                        if (isMuted) {
                            player.unMute();
                            toggleMusicBtn.innerHTML = '<i data-lucide="music-2" class="w-6 h-6"></i>';
                        } else {
                            player.mute();
                            toggleMusicBtn.innerHTML = '<i data-lucide="volume-x" class="w-6 h-6"></i>';
                        }
                        isMuted = !isMuted;
                        lucide.createIcons();
                    }
                });
            }
        }
        function initializeScrollToTop() {
            const scrollToTopBtn = document.getElementById('scrollToTopBtn');
            if (scrollToTopBtn) {
                window.addEventListener('scroll', () => {
                    const isVisible = window.scrollY > 300;
                    scrollToTopBtn.classList.toggle('opacity-0', !isVisible);
                    scrollToTopBtn.classList.toggle('invisible', !isVisible);
                    scrollToTopBtn.classList.toggle('translate-y-2', !isVisible);
                });
                scrollToTopBtn.addEventListener('click', () => {
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
            }
        }
        function initializeHoverEffects() {
            const grid = document.getElementById('plantGrid');
            if (!grid) return;
            function applyCardTransform(e, card) {
                const image = card.querySelector('.card-image');
                const rect = card.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                const xPercent = x / rect.width;
                const yPercent = y / rect.height;
                const rotateX = (yPercent - 0.5) * 2 * -8;
                const rotateY = (xPercent - 0.5) * 2 * 8;
                card.style.transition = 'none';
                card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(1.05)`;
                if (image) {
                    image.style.transition = 'none';
                    const moveX = (xPercent - 0.5) * 20;
                    const moveY = (yPercent - 0.5) * 20;
                    image.style.transform = `scale(1.2) translateX(${moveX}px) translateY(${moveY}px)`;
                }
            }
            function resetCardTransform(card) {
                const image = card.querySelector('.card-image');
                card.style.transition = 'transform 0.4s ease-out';
                card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) scale(1)';
                if (image) {
                    image.style.transition = 'transform 0.4s ease-out';
                    image.style.transform = 'scale(1) translateX(0) translateY(0)';
                }
            }
            grid.addEventListener('mousemove', (e) => {
                const card = e.target.closest('.plant-card');
                if (card) { applyCardTransform(e, card); }
            });
            grid.addEventListener('mouseleave', () => {
                const allCards = grid.querySelectorAll('.plant-card');
                allCards.forEach(resetCardTransform);
            });
            grid.addEventListener('mouseover', (e) => {
                const currentCard = e.target.closest('.plant-card');
                const allCards = grid.querySelectorAll('.plant-card');
                allCards.forEach(card => {
                    if (card !== currentCard) { resetCardTransform(card); }
                });
            });
        }
        document.addEventListener('DOMContentLoaded', function () {
            initializeSearch();
            initializeParticleEffect();
            initializeMusicPlayer();
            initializeScrollToTop();
            initializeHoverEffects();
            document.getElementById('year').textContent = new Date().getFullYear();
            lucide.createIcons();
        });
    </script>
</body>
</html>

